@isTest
public class TestDataTests {

    @isTest
    static void test(){
        // Testsetup & Test
		Utilities.deactivateTriggers();
		TriggerConfiguration.allInactive = true;
        ClaimTriggerhandler.Deactivate = true;
        User adminUser = TestData.createUser();
		adminUser.Username = 'adminUser@cloudworx.agency';
        adminUser.ProfileId = [SELECT Id FROM Profile WHERE Name='System Administrator'].Id;
        insert adminUser;
		EmailTemplate template;
        System.runAs(adminUser){
            template = TestData.createTemplate();
            insert template;
        }

        cloudworx_Management_Console__c config = TestData.createConfiguration();
		insert config;
        User user = TestData.createUser();
		insert user;
        Lead lead = TestData.createLead();
		insert lead;
        Account account = TestData.createAccount();
		insert account;
        Contact contact = TestData.createContact(account.Id);
		insert contact;
		Opportunity opportunity = TestData.createOpportunity(account.Id,'New');
		insert opportunity;
        EmailMessage emailMessage = TestData.createEmailMessage(opportunity.Id);
        insert emailMessage;
        Contract__c contract = TestData.createContract(opportunity.Id);
		insert contract;
		Document__c document = TestData.createDocument(opportunity.Id, 'http://www.cloudworx.agency/');
		insert document;
		Welcome_Letter__c welcomeLetter = TestData.createWelcomeLetter(opportunity.Id);
		insert welcomeLetter;
        Attachment attachment = TestData.createAttachment(opportunity.Id);
		insert attachment;
		Claim__c claim = TestData.createClaim(opportunity.Id,'Draft');
		insert claim;
	    Analysis__c analysis = TestData.createAnalysis(opportunity.Id);
	    insert analysis;
		Non_contributory_Period__c nonContributoryPeriod = TestData.createNonContributoryPeriod(opportunity.Id, System.today()-2, System.today()+2);
		insert nonContributoryPeriod;
		Opportunity_Correspondence__c opportunityCorrespondence = TestData.createOpportunityCorrespondence(opportunity.Id,'Customer','Draft');
		insert opportunityCorrespondence;
		Opportunity_Text_Module__c opportunityTextModule = TestData.createOpportunityTextModule(opportunityCorrespondence.Id,'Text Module 1');
		insert opportunityTextModule;
        Authorization__c authorization = TestData.createAuthorization(opportunity.Id);
		insert authorization;
		Test_Case__c testCase = TestData.createTestCase(opportunity.Id);
		insert testCase;
        Task task = TestData.createTask('Send offer to customer', opportunity.Id, user.Id);
		insert task;
        Product2 product = TestData.createProduct();
		insert product;
        PricebookEntry pricebookEntry = TestData.createPricebookEntry(product.Id);
		insert pricebookEntry;
        OpportunityLineItem opportunityLineItem = TestData.createOpportunityLineItem(opportunity.Id,pricebookEntry.Id,100.00);
        insert opportunityLineItem;
        OpportunityContactRole opportunityContactRole = TestData.createOpportunityContactRole(opportunity.Id,contact);
        insert opportunityContactRole;
        Note note = TestData.createNote(opportunity.Id);
        insert note;
        Invoice__c invoice = TestData.createInvoice(opportunity.Id);
		insert invoice;
		Invoice_Payment__c invoicePayment = TestData.createInvoicePayment(invoice.Id,10000);
		insert invoicePayment;
	    Invoice_Reminder__c invoiceReminder = TestData.createInvoiceReminder(invoice.Id,'Draft');
	    insert invoiceReminder;
        Fund__c fund = TestData.createFund('Testfund','99999');
		insert fund;
        Rate__c rate = TestData.createRate(fund.Id,0.3,100.45,Date.valueOf('2000-10-15'));
		insert rate;
        Fund_Reference__c fundReference = TestData.createFundReference(opportunity.Id,fund.Id,100);
		insert fundReference;
		Correspondence__c correspondence = TestData.createCorrespondence(claim.Id,'Insurance','Widerspruch durch Kunden','Draft');
		insert correspondence;
		Text_Module__c textModule = TestData.createTextModule(correspondence.Id,'Text Module 1');
		insert textModule;
		Deadline__c deadline = TestData.createDeadline(claim.Id);
		insert deadline;
		//Date__c thisDate = TestData.createDate(claim.Id);
		//insert thisDate;
		Cost_Note__c costNote = TestData.createCostNote(claim.Id,'Draft');
        costNote.type__c = 'Berufung';
		insert costNote;
		Cost_Note_Line_Item__c costNoteLineItem = TestData.createCostNoteLineItem(costNote.Id,10000);
        costNoteLineItem.type__c = 'Berufung';
		insert costNoteLineItem;
		Cancellation__c cancellation = TestData.createCancellation(costNote.Id,'Draft');
		insert cancellation;
		Cost_Note_Payment__c costNotePayment = TestData.createCostNotePayment(costNote.Id,10000);
		insert costNotePayment;
		Cost_Note_Reminder__c costNoteReminder = TestData.createCostNoteReminder(costNote.Id,'Draft');
		insert costNoteReminder;
		Credit_Note__c creditNote = TestData.createCreditNote(claim.Id,'Draft');
		insert creditNote;
		Credit_Note_Line_Item__c creditNoteLineItem = TestData.createCreditNoteLineItem(creditNote.Id,10000);
		insert creditNoteLineItem;
		Credit_Note_Payment__c creditNotePayment = TestData.createCreditNotePayment(creditNote.Id,10000);
		insert creditNotePayment;
		Receipt__c receipt = TestData.createReceipt(claim.Id,10000,'Draft');
		insert receipt;
		Receipt_Payment__c receiptPayment = TestData.createReceiptPayment(receipt.Id,10000);
		insert receiptPayment;
		Transaction__c trans = TestData.createTransaction(10000.00,System.today(),'12345abc','Purpose','Open');
		insert trans;
		account.Type = 'Fahrzeughersteller';
		update account;
		Class_Action__c classAction = TestData.createClassAction(account.Id,'Draft');
		insert classAction;
		Class_Action_Reference__c classActionReference = TestData.createClassActionReference(classAction.Id,claim.Id);
		insert classActionReference;
	    User_Reference__c userReference = TestData.createUserReference(account.Id, user.Id);
	    insert userReference;
	    Commission_Rate__c commissionRate = TestData.createCommissionRate(account.Id,account.Id,'Dieselskandal',20);
	    insert commissionRate;
	    Commission__c commission = TestData.createCommission(account.Id, account.Id, 20, 40, System.today() - 1, System.today() + 1);
	    insert commission;

        // Assertion
        System.assert(config != null);
        System.assert(user != null);
        System.assert(lead != null);
        System.assert(account != null);
        System.assert(contact != null);
        System.assert(opportunity != null);
        System.assert(emailMessage != null);
        System.assert(contract != null);
        System.assert(welcomeLetter != null);
		System.assert(document != null);
        System.assert(attachment != null);
        System.assert(claim != null);
	    System.assert(analysis != null);
		System.assert(nonContributoryPeriod != null);
		System.assert(opportunityCorrespondence != null);
		System.assert(opportunityTextModule != null);
        System.assert(authorization != null);
		System.assert(testCase != null);
        System.assert(task != null);
        System.assert(product != null);
        System.assert(pricebookEntry != null);
        System.assert(opportunityLineItem != null);
        System.assert(opportunityContactRole != null);
        System.assert(template != null);
        System.assert(note != null);
        System.assert(invoice != null);
		System.assert(invoicePayment != null);
	    System.assert(invoiceReminder != null);
        System.assert(fund != null);
        System.assert(rate != null);
        System.assert(fundReference != null);
        System.assert(correspondence != null);
        System.assert(textModule != null);
		System.assert(deadline != null);
		//System.assert(thisDate != null);
		System.assert(cancellation != null);
		System.assert(costNote != null);
		System.assert(costNoteLineItem != null);
		System.assert(costNotePayment != null);
		System.assert(costNoteReminder != null);
		System.assert(creditNote != null);
		System.assert(creditNoteLineItem != null);
		System.assert(creditNotePayment != null);
		System.assert(receipt != null);
		System.assert(receiptPayment != null);
		System.assert(trans != null);
		System.assert(classAction != null);
		System.assert(classActionReference != null);
	    System.assert(userReference != null);
	    System.assert(commissionRate != null);
	    System.assert(commission != null);
    }
}